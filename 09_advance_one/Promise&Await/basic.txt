//JS SINGLE THREADED AND SYNCHROUNOUS HAI BY DEFAULT



======>> IMPORTANT 
Async behaviour of JS me

jo bhi main stack par hota hai wo output karta hai and jo bhi side
 stack par hota hai wo behind the scenes processing kar sakta hai aur jab uski processing
 complete ho use main stack mein laa kar chalaya jaa sakta hai Yh mostly tb hota hai jb main stack empty ho 
 jaye ya fir side stack ka delay time complete ho jaye 



====>>  callback humesha ek function hota hai, ye sirf tab chalta hai jab async
code ka completion hojaata hai

Promise: Think of a promise as a guarantee made by someone (like a function)
 to do something and provide you with the result later. It's like ordering 
 food at a restaurant. You get a promise (receipt) saying your order will 
 be ready soon. You can wait for it (.then()) or check on it later (.catch()).

Async/Await: Async/await is like asking someone (a function) to do something
 for you, but instead of waiting for them to finish right there, you tell them
  you'll do something else while they work. It's like asking a friend 
  to pick up your order from the restaurant. You can go do other things
   (like order a drink) while your friend (the async function) waits for 
   the food (awaits the promise).


• Async/await used for handling promises
• Async always return a promise
° Await can only used inside an async function
° Can only write await keyword infront of a promise
° While awaiting JS Engine does not actually wait rather the function is suspended and call stack is free for other stuffs but it looks like program is waiting at that point
° Use try catch for Error handling and can also use  . Catch() method


async: The async keyword is used to declare an asynchronous function. An async function always returns a promise.
await: The await keyword is used inside an async function to wait for a promise to settle (either fulfilled or rejected) before moving to the next line of code.

The await keyword pauses the execution of the async function until
 the promise is resolved or rejected. However, it doesn't
  block the main thread, making it efficient.



  Key Differences:

====>>   Readability:

Promise: You chain .then() and .catch(), which can sometimes become hard to
 read (especially with nested promises).
Async/Await: It looks more like synchronous code, 
making it easier to follow. Each await expression pauses 
the function execution until the promise is resolved.


====>>   Error Handling:

Promise: Errors are handled using .catch().
Async/Await: You can use a try/catch block to handle errors,
 making the flow similar to traditional error handling.



 ====>>  Chaining:
Promise: You chain asynchronous operations using .then().
Async/Await: You can use multiple await statements one after another, 
making the code flow naturally.
